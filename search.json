[{"title":"Esto es una prueba nada mas","url":"/2019/09/22/prueba/","content":"\n## Instalar\n\n\tsudo curl -sSL https://get.docker.com | sh\n\tsudo apt install docker-compose | sh\n\tsudo groupadd docker\n\tsudo usermod -aG docker \"$USER\"\n\n\nHello my world\n\nsudo groupadd docker\n\nsudo usermod -aG docker $USER\n\ndocker login -u username\n\ndocker tag first-image {docker-hub-username}/{default-repo-folder-name}:first-image\n\ndocker push {docker-hub-username}/{default-repo-folder-name}:first-image\n\n\n\n\n\n1. [docker ps](https://docs.docker.com/engine/reference/commandline/ps/) — Lists running containers. Some useful flags include: `-a` / `-all` for all containers (default shows just running) and `—-quiet` /`-q` to list just their ids (useful for when you want to get all the containers).\n2. [docker pull](https://docs.docker.com/engine/reference/commandline/pull/) — Most of your images will be created on top of a base image from the [Docker Hub](https://hub.docker.com/) registry. [Docker Hub](https://hub.docker.com/) contains many pre-built images that you can `pull` and try without needing to define and configure your own. To download a particular image, or set of images (i.e., a repository), use `docker pull`.\n3. [docker build](https://docs.docker.com/engine/reference/commandline/build/) — The `docker build` command builds Docker images from a Dockerfile and a “context”. A build’s context is the set of files located in the specified `PATH` or `URL`. Use the `-t` flag to label the image, for example `docker build -t my_container .` with the `.` at the end signalling to build using the currently directory.\n4. [docker run](https://docs.docker.com/engine/reference/run/) — Run a docker container based on an image, you can follow this on with other commands, such as `-it bash` to then run bash from within the container. *Also see* [*Top 10 options for docker run — a quick reference guide for the CLI command*](https://medium.com/the-code-review/top-10-docker-run-command-options-you-cant-live-without-a-reference-d256834e86c1)*.* `docker run my_image -it bash`\n5. [docker logs ](https://docs.docker.com/engine/reference/commandline/logs/)— Use this command to display the logs of a container, you must specify a container and can use flags, such as `--follow` to follow the output in the logs of using the program. `docker logs --follow my_container`\n6. [docker volume ls](https://docs.docker.com/engine/reference/commandline/volume_ls/) — This lists the [volumes](https://docs.docker.com/storage/volumes/), which are the preferred mechanism for persisting data generated by and used by Docker containers.\n7. [docker rm](https://docs.docker.com/engine/reference/commandline/rm/) — Removes one or more containers. `docker rm my_container`\n8. [docker rmi ](https://docs.docker.com/engine/reference/commandline/rmi/)— Removes one or more images. `docker rmi my_image`\n9. [docker stop](https://docs.docker.com/engine/reference/commandline/stop/) — Stops one or more containers. `docker stop my_container`stops one container, while `docker stop $(docker ps -a -q)` stops all running containers. A more direct way is to use `docker kill my_container`, which does not attempt to shut down the process gracefully first.\n10. Use them together, for example to clean up all your docker images and containers:\n\n- kill all running containers with `docker kill $(docker ps -q)`\n- delete all stopped containers with `docker rm $(docker ps -a -q)`\n- delete all images with `docker rmi -f $(docker images -q)`\n\n\n\ndocker stop $(docker ps -a -q) && docker rm -f $(docker ps -a -q) && docker rmi -f $(docker images -q) && docker system prune\n\n\n\ndocker login\n\n\n\ndocker build . -t rpi-deluge-filebot\n\ndocker build . -t deluge-filebot-rpi --no-cache\n\n\n\ndocker run -d -v /media/hdd/config/deluge:/config -v /media/hdd/data:/data -p 58846:58846 -p 8112:8112 --name=deluge4 rpi-deluge-filebot:latest\n\ndocker exec -i -t deluge4 /bin/bash\n\n\n\n\n\ndocker tag alpine-telethon-rpi jsmsalt/alpine-telethon-rpi:latest\n\ndocker push jsmsalt/alpine-telethon-rpi:latest\n\n\n\n\n\n\n\ndocker run -it alpine-filebot-rpi -c /bin/sh\n\n\n\n\n\n\n\ndocker run -d -v /home/pi/filebot/script:/script -v /home/pi/filebot/media:/media -v /home/pi/filebot/download:/download -v /home/pi/filebot/log:/log --name=filebot alpine-filebot-rpi:latest\n\n\n\n\n\ndocker-compose up -d  --remove-orphans --force-recreate\n\n##### Cleanup\n\nIf you ran these commands, you have a bunch of stopped containers left on your host. Clean them up:\n\n```\ndocker system prune\n```\n\n\n\n\n\ndocker run -d -v /media/hdd/config/filebrowser:/config -v /media/hdd/data:/data -p 8080:80 --name=filebrowser filebrowser-rpi\n\n\n\nhttp://www.johnzaccone.io/entrypoint-vs-cmd-back-to-basics/\n\n\n\nhttps://vsupalov.com/debug-docker-container/\n\n\n\nhttps://www.sandtable.com/reduce-docker-image-sizes-using-alpine/\n\n\n\nhttps://nickjanetakis.com/blog/docker-tip-47-build-time-vs-run-time-env-variables\n\n\n\nhttp://goinbigdata.com/docker-run-vs-cmd-vs-entrypoint/\n\nhttps://microbadger.com/\n\nhttps://dockeri.co/\n\n","tags":["Docker","Setup"]},{"title":"Instalar Flutter y configurar tu entorno sin emulador","url":"/2019/09/22/flutter-instalacion/","content":"\n## Instalar\n\n\tsudo curl -sSL https://get.docker.com | sh\n\tsudo apt install docker-compose | sh\n\tsudo groupadd docker\n\tsudo usermod -aG docker \"$USER\"\n\n\nHello my world\n\nsudo groupadd docker\n\nsudo usermod -aG docker $USER\n\ndocker login -u username\n\ndocker tag first-image {docker-hub-username}/{default-repo-folder-name}:first-image\n\ndocker push {docker-hub-username}/{default-repo-folder-name}:first-image\n\n\n\n\n\n1. [docker ps](https://docs.docker.com/engine/reference/commandline/ps/) — Lists running containers. Some useful flags include: `-a` / `-all` for all containers (default shows just running) and `—-quiet` /`-q` to list just their ids (useful for when you want to get all the containers).\n2. [docker pull](https://docs.docker.com/engine/reference/commandline/pull/) — Most of your images will be created on top of a base image from the [Docker Hub](https://hub.docker.com/) registry. [Docker Hub](https://hub.docker.com/) contains many pre-built images that you can `pull` and try without needing to define and configure your own. To download a particular image, or set of images (i.e., a repository), use `docker pull`.\n3. [docker build](https://docs.docker.com/engine/reference/commandline/build/) — The `docker build` command builds Docker images from a Dockerfile and a “context”. A build’s context is the set of files located in the specified `PATH` or `URL`. Use the `-t` flag to label the image, for example `docker build -t my_container .` with the `.` at the end signalling to build using the currently directory.\n4. [docker run](https://docs.docker.com/engine/reference/run/) — Run a docker container based on an image, you can follow this on with other commands, such as `-it bash` to then run bash from within the container. *Also see* [*Top 10 options for docker run — a quick reference guide for the CLI command*](https://medium.com/the-code-review/top-10-docker-run-command-options-you-cant-live-without-a-reference-d256834e86c1)*.* `docker run my_image -it bash`\n5. [docker logs ](https://docs.docker.com/engine/reference/commandline/logs/)— Use this command to display the logs of a container, you must specify a container and can use flags, such as `--follow` to follow the output in the logs of using the program. `docker logs --follow my_container`\n6. [docker volume ls](https://docs.docker.com/engine/reference/commandline/volume_ls/) — This lists the [volumes](https://docs.docker.com/storage/volumes/), which are the preferred mechanism for persisting data generated by and used by Docker containers.\n7. [docker rm](https://docs.docker.com/engine/reference/commandline/rm/) — Removes one or more containers. `docker rm my_container`\n8. [docker rmi ](https://docs.docker.com/engine/reference/commandline/rmi/)— Removes one or more images. `docker rmi my_image`\n9. [docker stop](https://docs.docker.com/engine/reference/commandline/stop/) — Stops one or more containers. `docker stop my_container`stops one container, while `docker stop $(docker ps -a -q)` stops all running containers. A more direct way is to use `docker kill my_container`, which does not attempt to shut down the process gracefully first.\n10. Use them together, for example to clean up all your docker images and containers:\n\n- kill all running containers with `docker kill $(docker ps -q)`\n- delete all stopped containers with `docker rm $(docker ps -a -q)`\n- delete all images with `docker rmi -f $(docker images -q)`\n\n\n\ndocker stop $(docker ps -a -q) && docker rm -f $(docker ps -a -q) && docker rmi -f $(docker images -q) && docker system prune\n\n\n\ndocker login\n\n\n\ndocker build . -t rpi-deluge-filebot\n\ndocker build . -t deluge-filebot-rpi --no-cache\n\n\n\ndocker run -d -v /media/hdd/config/deluge:/config -v /media/hdd/data:/data -p 58846:58846 -p 8112:8112 --name=deluge4 rpi-deluge-filebot:latest\n\ndocker exec -i -t deluge4 /bin/bash\n\n\n\n\n\ndocker tag alpine-telethon-rpi jsmsalt/alpine-telethon-rpi:latest\n\ndocker push jsmsalt/alpine-telethon-rpi:latest\n\n\n\n\n\n\n\ndocker run -it alpine-filebot-rpi -c /bin/sh\n\n\n\n\n\n\n\ndocker run -d -v /home/pi/filebot/script:/script -v /home/pi/filebot/media:/media -v /home/pi/filebot/download:/download -v /home/pi/filebot/log:/log --name=filebot alpine-filebot-rpi:latest\n\n\n\n\n\ndocker-compose up -d  --remove-orphans --force-recreate\n\n##### Cleanup\n\nIf you ran these commands, you have a bunch of stopped containers left on your host. Clean them up:\n\n```\ndocker system prune\n```\n\n\n\n\n\ndocker run -d -v /media/hdd/config/filebrowser:/config -v /media/hdd/data:/data -p 8080:80 --name=filebrowser filebrowser-rpi\n\n\n\nhttp://www.johnzaccone.io/entrypoint-vs-cmd-back-to-basics/\n\n\n\nhttps://vsupalov.com/debug-docker-container/\n\n\n\nhttps://www.sandtable.com/reduce-docker-image-sizes-using-alpine/\n\n\n\nhttps://nickjanetakis.com/blog/docker-tip-47-build-time-vs-run-time-env-variables\n\n\n\nhttp://goinbigdata.com/docker-run-vs-cmd-vs-entrypoint/\n\nhttps://microbadger.com/\n\nhttps://dockeri.co/\n\n","tags":["Docker","Setup"]},{"title":"Hello World","url":"/2019/06/05/hello-world/","content":"\nThis is your very first post.\n\n<!-- more -->\n## Hello\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse a sapien ligula. Vestibulum in condimentum nulla. Integer at orci ullamcorper, mollis tellus nec, accumsan enim. Integer ut odio et nibh vehicula rhoncus. Duis purus velit, pellentesque eget lectus eget, feugiat porta augue. Etiam varius sed lacus id ultricies. Quisque dictum ipsum in vulputate iaculis.\n\n```javascript\nparseInt(\"123\", 10)\n// 123\nparseInt(\"010\", 10)\n// 10\n```\n\n```html\n<!DOCTYPE html>\n<html>\n<body>\n\n<h1>My First Heading</h1>\n<p>My first paragraph.</p>\n\n</body>\n</html>\n```\n\n```css\n.highlight {\n  display: block;\n  overflow-x: auto;\n  padding: 10px;\n  margin: 20px 0;\n  font-size: $code-font-size;\n  font-family: $code-font-family;\n  color: $highlight-foreground;\n  background: $highlight-background;\n  line-height: $line-height-code-block;\n  letter-spacing: $code-letter-spacing;\n  border-radius: $code-border-radius;\n  border: 1px solid $highlight-border-color;\n  position: relative;\n  width: 100%;\n  &:after {\n    position: absolute;\n    top: 0;\n    right: 0;\n    color: #ccc;\n    content: \"Code\";\n    font-size: 12px;\n    padding: 5px 10px 0;\n    height: 15px;\n  }\n\n  table {\n    margin: 0px !important;\n  }\n\n  .comment,\n  .quote {\n    color: $highlight-comment;\n    font-style: italic;\n  }\n\n  .doctag,\n  .keyword,\n  .formula {\n    color: $highlight-aqua;\n  }\n\n  .section,\n  .name,\n  .selector-tag,\n  .deletion,\n  .subst {\n    color: $highlight-red;\n  }\n\n  .literal {\n    color: $highlight-blue;\n  }\n\n  .string,\n  .regexp,\n  .addition,\n  .attribute,\n  .meta-string {\n    color: $highlight-green;\n  }\n\n  .built_in,\n  .class .title {\n    color: $highlight-purple;\n  }\n\n  .attr,\n  .variable,\n  .template-variable,\n  .type,\n  .selector-class,\n  .selector-attr,\n  .selector-pseudo,\n  .number {\n    color: $highlight-orange;\n  }\n\n  .symbol,\n  .bullet,\n  .link,\n  .meta,\n  .selector-id,\n  .title {\n    color: #61aeee;\n  }\n\n  .emphasis {\n    font-style: italic;\n  }\n\n  .strong {\n    font-weight: bold;\n  }\n\n  .link {\n    text-decoration: underline;\n  }\n\n  &.html.highlight:after {\n    content: \"HTML\";\n  }\n  &.javascript.highlight:after {\n    content: \"Javascript\";\n  }\n  &.js.highlight:after {\n    content: \"Javascript\";\n  }\n  &.bash.highlight:after {\n    content: \"Shell\";\n  }\n  &.css.highlight:after {\n    content: \"CSS\";\n  }\n  &.vue.highlight:after {\n    content: \"Vue\";\n  }\n  &.sass.highlight:after {\n    content: \"SASS\";\n  }\n  &.less.highlight:after {\n    content: \"LESS\";\n  }\n  &.styl.highlight:after {\n    content: \"Styl\";\n  }\n  &.java.highlight:after {\n    content: \"Java\";\n  }\n  &.cpp.highlight:after {\n    content: \"C++\";\n  }\n  &.c.highlight:after {\n    content: \"C\";\n  }\n  &.yml.highlight:after {\n    content: \"YML\";\n  }\n  &.php.highlight:after {\n    content: \"PHP\";\n  }\n}\n```\n\n\n### This is my new post\n\nVestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Donec pellentesque maximus ipsum, eget varius justo. Praesent ac tincidunt tellus. Sed nisl dolor, dignissim ac eleifend et, suscipit et augue. Duis quis risus sapien. Donec eget erat at tellus sollicitudin molestie quis ac urna. Duis luctus metus at tincidunt condimentum. Vivamus lorem dolor, placerat sed tortor ac, lobortis fringilla augue. Morbi iaculis in leo quis ultrices. Maecenas vulputate viverra magna, ac ullamcorper magna convallis ut.\n\nEtiam id imperdiet elit. Fusce in augue mollis turpis aliquam efficitur. Nam porta metus bibendum turpis commodo, sed lobortis nibh viverra. Cras at interdum tortor. Interdum et malesuada fames ac ante ipsum primis in faucibus. Vestibulum vulputate semper dui tempor convallis. Nam tempus sodales velit.\n","tags":["javascript","node"],"categories":["Programación"]},{"title":"Docker","url":"/2014/07/02/docker/","content":"\n## Instalar\n\n\tsudo curl -sSL https://get.docker.com | sh\n\tsudo apt install docker-compose | sh\n\tsudo groupadd docker\n\tsudo usermod -aG docker \"$USER\"\n\n\nHello my world\n\nsudo groupadd docker\n\nsudo usermod -aG docker $USER\n\ndocker login -u username\n\ndocker tag first-image {docker-hub-username}/{default-repo-folder-name}:first-image\n\ndocker push {docker-hub-username}/{default-repo-folder-name}:first-image\n\n\n\n\n\n1. [docker ps](https://docs.docker.com/engine/reference/commandline/ps/) — Lists running containers. Some useful flags include: `-a` / `-all` for all containers (default shows just running) and `—-quiet` /`-q` to list just their ids (useful for when you want to get all the containers).\n2. [docker pull](https://docs.docker.com/engine/reference/commandline/pull/) — Most of your images will be created on top of a base image from the [Docker Hub](https://hub.docker.com/) registry. [Docker Hub](https://hub.docker.com/) contains many pre-built images that you can `pull` and try without needing to define and configure your own. To download a particular image, or set of images (i.e., a repository), use `docker pull`.\n3. [docker build](https://docs.docker.com/engine/reference/commandline/build/) — The `docker build` command builds Docker images from a Dockerfile and a “context”. A build’s context is the set of files located in the specified `PATH` or `URL`. Use the `-t` flag to label the image, for example `docker build -t my_container .` with the `.` at the end signalling to build using the currently directory.\n4. [docker run](https://docs.docker.com/engine/reference/run/) — Run a docker container based on an image, you can follow this on with other commands, such as `-it bash` to then run bash from within the container. *Also see* [*Top 10 options for docker run — a quick reference guide for the CLI command*](https://medium.com/the-code-review/top-10-docker-run-command-options-you-cant-live-without-a-reference-d256834e86c1)*.* `docker run my_image -it bash`\n5. [docker logs ](https://docs.docker.com/engine/reference/commandline/logs/)— Use this command to display the logs of a container, you must specify a container and can use flags, such as `--follow` to follow the output in the logs of using the program. `docker logs --follow my_container`\n6. [docker volume ls](https://docs.docker.com/engine/reference/commandline/volume_ls/) — This lists the [volumes](https://docs.docker.com/storage/volumes/), which are the preferred mechanism for persisting data generated by and used by Docker containers.\n7. [docker rm](https://docs.docker.com/engine/reference/commandline/rm/) — Removes one or more containers. `docker rm my_container`\n8. [docker rmi ](https://docs.docker.com/engine/reference/commandline/rmi/)— Removes one or more images. `docker rmi my_image`\n9. [docker stop](https://docs.docker.com/engine/reference/commandline/stop/) — Stops one or more containers. `docker stop my_container`stops one container, while `docker stop $(docker ps -a -q)` stops all running containers. A more direct way is to use `docker kill my_container`, which does not attempt to shut down the process gracefully first.\n10. Use them together, for example to clean up all your docker images and containers:\n\n- kill all running containers with `docker kill $(docker ps -q)`\n- delete all stopped containers with `docker rm $(docker ps -a -q)`\n- delete all images with `docker rmi -f $(docker images -q)`\n\n\n\ndocker stop $(docker ps -a -q) && docker rm -f $(docker ps -a -q) && docker rmi -f $(docker images -q) && docker system prune\n\n\n\ndocker login\n\n\n\ndocker build . -t rpi-deluge-filebot\n\ndocker build . -t deluge-filebot-rpi --no-cache\n\n\n\ndocker run -d -v /media/hdd/config/deluge:/config -v /media/hdd/data:/data -p 58846:58846 -p 8112:8112 --name=deluge4 rpi-deluge-filebot:latest\n\ndocker exec -i -t deluge4 /bin/bash\n\n\n\n\n\ndocker tag alpine-telethon-rpi jsmsalt/alpine-telethon-rpi:latest\n\ndocker push jsmsalt/alpine-telethon-rpi:latest\n\n\n\n\n\n\n\ndocker run -it alpine-filebot-rpi -c /bin/sh\n\n\n\n\n\n\n\ndocker run -d -v /home/pi/filebot/script:/script -v /home/pi/filebot/media:/media -v /home/pi/filebot/download:/download -v /home/pi/filebot/log:/log --name=filebot alpine-filebot-rpi:latest\n\n\n\n\n\ndocker-compose up -d  --remove-orphans --force-recreate\n\n##### Cleanup\n\nIf you ran these commands, you have a bunch of stopped containers left on your host. Clean them up:\n\n```\ndocker system prune\n```\n\n\n\n\n\ndocker run -d -v /media/hdd/config/filebrowser:/config -v /media/hdd/data:/data -p 8080:80 --name=filebrowser filebrowser-rpi\n\n\n\nhttp://www.johnzaccone.io/entrypoint-vs-cmd-back-to-basics/\n\n\n\nhttps://vsupalov.com/debug-docker-container/\n\n\n\nhttps://www.sandtable.com/reduce-docker-image-sizes-using-alpine/\n\n\n\nhttps://nickjanetakis.com/blog/docker-tip-47-build-time-vs-run-time-env-variables\n\n\n\nhttp://goinbigdata.com/docker-run-vs-cmd-vs-entrypoint/\n\nhttps://microbadger.com/\n\nhttps://dockeri.co/\n\n","tags":["Docker","Setup"],"categories":["Javascript"]}]